//////obtener todos los productos
query getAllProducts{
  product{
    id
    name
  }
}
///
obtener todos los elementos de un array de ids 

{
  getProductByArray(array:[1,2,2,3,4]) {
    id
    name
  }
}

/// obtener las categorias 

query getAllCategories{
  getAllCategories{
    name
  }
}

{
  getAllCategories{
    name
  }
}
//// agregar un nuevo producto
/// se puede pasar o no una categoria
mutation {
  addProduct(category: 1, name: "toritassas", description: "dsds", price: 50, stock: 50, image: "nico"){
    id
  }
}

//eliminar un producto por su id 
mutation{
  deleteById(id:2)
}
/// traer un producto por Id
{
  productById (id:6){
    name
    description
    price
    stock
    image
  }
}
/////

////actualizar una categoria, recibe un para metro id y un input con la data que se va a actualizar
mutation {
  updateCategory(id: 1 , input: {
    name: "bittersweet"
  })
}

//// AGREGAR CATEGORIA
mutation{
  addCategory(name:"Spicy"){
   	id
  }
}


//traer todas las categorias 
{
    categories{
      id
      name
    }
  }

// ESTE ES UN EJEMPLO DE AGREGAR CATEGORIA PARA PETICIONES DESDE EL FRONT
mutation addCategory ($name: String!){
    addCategory(name: $name) {
      name
    }
  }
//buscar producto con su categoria segun su id
{
    productCategory(id:1){
    name
    categories{
      name
    }
  }
  }



//// PARA ELIMINAR UNA CATEGORIA
mutation{
	deleteCategory(id:1)
}

//PARA AGREGAR UNA CATEGORIA A UN PRODUCTO
mutation{
  addCategoryToProduct(idProduct:1,idCategory:1){
   	name
  }
}

//PARA ELIMINAR UNA CATEGORIA DE UN PRODUCTO
mutation{
  removeCategoryFromProduct(idProduct:1,idCategory:1){
   	name
  }
}


// PARA AGREGAR UN USUARIO
mutation {
  createUser(name: "ivan", password: "helloworld", email: "ivan@ivan.com", role:"admin"){
    name
  }
}
// PARA LA MODIFICACION DE UN USUARIO
mutation {
  modifyUser(id: 1 ,name: "NAME", password: "12333334", email: "email@email.com", role:"role"){
    name
    id
    email
    role
  }
}
// PARA OBTENER TODOS LOS PRODUCTOS DE UNA CATEGORIA (POR NOMBRE)
query
  {
    getProductByCategoryName(name:"Bitter") {
      id
      name
      price
      stock
      image
    }
  }

  // PARA OBTENER UN PRODUCTO POR NOMBRE
  query 
  {
  getProductByName(name : "Cuchillo"){
    name

  }

  // Para obtener todas las ordenes que ya atravesaron el checkout
  query{
    getAllOrders(){
      order{
        id
        status
        lineal_order{
          price
          quantity
          product{
            id
            name
          }
        }
      }
    }
  }
}

// PARA OBTENER TODOS LOS USUARIOS (SIN CONTRASEÃ‘A) CON SUS PRODUCTOS Y CON SUS REVIEWS
{
  getAllUsers{name, email, products{
    id
    name
    description
    price
    stock
    image
    categories{
      id 
      name  
    }  
  }, reviews{
    id
    title
  	description
    stars
  }}


{
  validateUser(name: "Fran", password: "hw"){
  	__typename
    ...on user {
      name
    }
    ...on error {
      name
      detail
    }
  }
}

//CREAR UNA ORDEN
mutation{
  createOrder(idUser:1,
    dataProducts:
    [
    {id:1,quantity:100},
    {id:5,quantity:10},
    {id:4,quantity:11}
    ]
  ){
    id
    status
    lineal_order{
      userId
      price
      quantity
      product{
        id
        name
        description
        price
        stock
        image
        categories{
          id
          name
        }
      }
    }
  }
}